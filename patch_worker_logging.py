#!/usr/bin/env python3
"""
–ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ Google Colab
"""
import os
import sys
import logging
from pathlib import Path
import importlib
import types
import functools
import inspect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/content/videobot/logs/enhanced_worker.log')
    ]
)
logger = logging.getLogger(__name__)

def patch_function(module_name, function_name, wrapper_func):
    """
    –ü–∞—Ç—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–æ–¥—É–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
    
    Args:
        module_name: –ò–º—è –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'app.workers.video_tasks')
        function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ç—á–∞
        wrapper_func: –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        module = importlib.import_module(module_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        original_func = getattr(module, function_name)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É
        @functools.wraps(original_func)
        def wrapped_func(*args, **kwargs):
            return wrapper_func(original_func, *args, **kwargs)
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        setattr(module, function_name, wrapped_func)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {module_name}.{function_name}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {module_name}.{function_name}: {e}")
        return False

def patch_method(class_path, method_name, wrapper_func):
    """
    –ü–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    
    Args:
        class_path: –ü—É—Ç—å –∫ –∫–ª–∞—Å—Å—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'app.services.google_drive.GoogleDriveService')
        method_name: –ò–º—è –º–µ—Ç–æ–¥–∞
        wrapper_func: –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    """
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –º–æ–¥—É–ª—å –∏ –∫–ª–∞—Å—Å
        module_path, class_name = class_path.rsplit('.', 1)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        module = importlib.import_module(module_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å
        cls = getattr(module, class_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        original_method = getattr(cls, method_name)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É
        @functools.wraps(original_method)
        def wrapped_method(self, *args, **kwargs):
            return wrapper_func(original_method, self, *args, **kwargs)
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        setattr(cls, method_name, wrapped_method)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –º–µ—Ç–æ–¥ {class_path}.{method_name}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ –º–µ—Ç–æ–¥–∞ {class_path}.{method_name}: {e}")
        return False

# –ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
def download_video_wrapper(original_func, self, task_id, url, quality="best", settings_dict=None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è download_video"""
    logger.info(f"üîΩ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {url}")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = original_func(self, task_id, url, quality, settings_dict)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        file_size_mb = result.get('file_size', 0) / (1024 * 1024)
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {result.get('title')} ({file_size_mb:.2f} –ú–ë)")
        logger.info(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {result.get('local_path')}")
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration')} —Å–µ–∫—É–Ω–¥")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        raise

# –ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
def process_video_wrapper(original_func, self, task_id, local_path, settings_dict):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è process_video"""
    logger.info(f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
    logger.info(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {local_path}")
    logger.info(f"üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {settings_dict}")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = original_func(self, task_id, local_path, settings_dict)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(result)}")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        raise

# –ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive
def upload_to_drive_wrapper(original_func, task_id, fragments):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è upload_to_drive"""
    logger.info(f"‚òÅÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ Google Drive –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
    logger.info(f"üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º {len(fragments)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = original_func(task_id, fragments)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result)}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã
        for i, upload_result in enumerate(result):
            logger.info(f"üîó –§—Ä–∞–≥–º–µ–Ω—Ç {i+1}: {upload_result.get('direct_url', 'N/A')}")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive: {e}")
        raise

# –ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è GoogleDriveService.upload_multiple_files
def upload_multiple_files_wrapper(original_method, self, file_paths, task_id=None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è GoogleDriveService.upload_multiple_files"""
    logger.info(f"‚òÅÔ∏è GoogleDriveService: –ó–∞–≥—Ä—É–∑–∫–∞ {len(file_paths)} —Ñ–∞–π–ª–æ–≤ –Ω–∞ Google Drive")
    logger.info(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {self.auth_type}, –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.service is not None}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ token.pickle
    token_path = "token.pickle"
    if os.path.exists(token_path):
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω token.pickle: {os.path.getsize(token_path)} –±–∞–π—Ç")
    else:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        result = original_method(self, file_paths, task_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        successful = [r for r in result if r.get("success")]
        failed = [r for r in result if not r.get("success")]
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {len(successful)}/{len(result)} —É—Å–ø–µ—à–Ω–æ, {len(failed)} —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for i, upload_result in enumerate(successful):
            logger.info(f"üîó –§–∞–π–ª {i+1}: {upload_result.get('direct_url', upload_result.get('file_url', 'N/A'))}")
        
        # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
        for i, upload_result in enumerate(failed):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {upload_result.get('file_path', f'#{i+1}')}: {upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ GoogleDriveService.upload_multiple_files: {e}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ç—á–µ–π"""
    logger.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Colab")
    
    # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    patches = [
        # –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
        {
            'module': 'app.workers.video_tasks',
            'function': 'download_video',
            'wrapper': download_video_wrapper
        },
        # –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
        {
            'module': 'app.workers.video_tasks',
            'function': 'process_video',
            'wrapper': process_video_wrapper
        },
        # –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive
        {
            'module': 'app.workers.video_tasks',
            'function': 'upload_to_drive',
            'wrapper': upload_to_drive_wrapper
        },
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ —Ñ—É–Ω–∫—Ü–∏–π
    for patch in patches:
        patch_function(patch['module'], patch['function'], patch['wrapper'])
    
    # –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤
    method_patches = [
        # –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ Google Drive
        {
            'class_path': 'app.services.google_drive.GoogleDriveService',
            'method': 'upload_multiple_files',
            'wrapper': upload_multiple_files_wrapper
        },
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –º–µ—Ç–æ–¥–æ–≤
    for patch in method_patches:
        patch_method(patch['class_path'], patch['method'], patch['wrapper'])
    
    logger.info("‚úÖ –ü–∞—Ç—á–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

if __name__ == "__main__":
    main()
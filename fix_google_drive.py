#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import os
import pickle
import logging
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_google_drive_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Google Drive"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Drive...")
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º token.pickle
    token_path = "token.pickle"
    if not os.path.exists(token_path):
        issues.append("‚ùå –§–∞–π–ª token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("‚ùå –§–∞–π–ª token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω: python setup_oauth.py")
    else:
        try:
            with open(token_path, 'rb') as f:
                creds = pickle.load(f)
            
            if hasattr(creds, 'valid') and creds.valid:
                print("‚úÖ token.pickle –Ω–∞–π–¥–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω")
            elif hasattr(creds, 'expired') and creds.expired and hasattr(creds, 'refresh_token') and creds.refresh_token:
                print("‚ö†Ô∏è token.pickle –∏—Å—Ç–µ–∫, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                issues.append("‚ùå token.pickle –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                print("‚ùå token.pickle –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        except Exception as e:
            issues.append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è token.pickle: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è token.pickle: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º google-credentials.json
    creds_path = "google-credentials.json"
    if not os.path.exists(creds_path):
        issues.append("‚ùå –§–∞–π–ª google-credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("‚ùå –§–∞–π–ª google-credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–∫–∞—á–∞–π—Ç–µ –∏–∑ Google Cloud Console")
    else:
        print("‚úÖ google-credentials.json –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    google_env_vars = [
        "GOOGLE_DRIVE_FOLDER_ID",
        "GOOGLE_CREDENTIALS_JSON_CONTENT"
    ]
    
    for var in google_env_vars:
        if os.getenv(var):
            print(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"‚ö†Ô∏è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from googleapiclient.discovery import build
        print("‚úÖ Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        issues.append(f"‚ùå Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
        print(f"‚ùå Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib")
    
    return len(issues) == 0, issues

def fix_google_drive_service():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç GoogleDriveService —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª mock"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GoogleDriveService...")
    
    service_file = "app/services/google_drive.py"
    
    if not os.path.exists(service_file):
        print(f"‚ùå –§–∞–π–ª {service_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ mock –∫–æ–¥
        if "mock.drive.url" in content:
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω mock –∫–æ–¥ –≤ GoogleDriveService")
            
            # –ó–∞–º–µ–Ω—è–µ–º mock –Ω–∞ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            content = content.replace(
                '"webViewLink": "https://mock.drive.url/file/view"',
                '"webViewLink": "https://drive.google.com/file/d/mock_file_id/view"'
            )
            
            content = content.replace(
                '"directLink": f"https://mock.direct.link/{os.path.basename(file_path)}"',
                '"directLink": f"https://drive.google.com/uc?id=mock_file_id&export=download"'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock
            mock_section = '''        if not self.service:
            file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
            logger.warning(f"Google Drive service not initialized! Using mock upload for: {os.path.basename(file_path)}")
            logger.warning("Check Google Drive credentials and token.pickle file")'''
            
            content = content.replace(
                '''        if not self.service:
            file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
            logger.info(f"Mock upload: {os.path.basename(file_path)} ({file_size} bytes) to folder {folder_id or 'root'}")''',
                mock_section
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(service_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ GoogleDriveService –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            return True
        else:
            print("‚úÖ Mock –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–µ—Ä–≤–∏—Å –≤ –ø–æ—Ä—è–¥–∫–µ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è GoogleDriveService: {e}")
        return False

def create_google_drive_test():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Google Drive"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
    
    test_code = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import sys
import os
sys.path.append('.')

from app.services.google_drive import GoogleDriveService

def test_google_drive():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Google Drive —Å–µ—Ä–≤–∏—Å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Drive...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        drive_service = GoogleDriveService()
        
        print(f"üîê Credentials: {'‚úÖ Loaded' if drive_service.credentials else '‚ùå Not loaded'}")
        print(f"üîß Service: {'‚úÖ Initialized' if drive_service.service else '‚ùå Not initialized'}")
        print(f"üîë Auth type: {getattr(drive_service, 'auth_type', 'unknown')}")
        
        if drive_service.service:
            print("‚úÖ Google Drive –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
        else:
            print("‚ùå Google Drive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ token.pickle –∏ google-credentials.json")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_google_drive()
    exit(0 if success else 1)
'''
    
    with open('test_drive_service.py', 'w') as f:
        f.write(test_code)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω test_drive_service.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß VideoGenerator3000 - Google Drive Fix")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    is_ok, issues = check_google_drive_setup()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å
    service_fixed = fix_google_drive_service()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
    create_google_drive_test()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if is_ok and service_fixed:
        print("‚úÖ Google Drive –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_drive_service.py")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Google Drive:")
        for issue in issues:
            print(f"   {issue}")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not os.path.exists("token.pickle"):
            print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω: python setup_oauth.py")
        if not os.path.exists("google-credentials.json"):
            print("2. –°–∫–∞—á–∞–π—Ç–µ google-credentials.json –∏–∑ Google Cloud Console")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_drive_service.py")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_drive –≤ –±–æ—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    main()
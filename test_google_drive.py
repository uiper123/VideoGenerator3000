#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç–æ–∫–µ–Ω–∞
"""
import os
import pickle
import logging
from datetime import datetime
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_token_pickle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç token.pickle —Ñ–∞–π–ª"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ token.pickle...")
    
    token_path = "token.pickle"
    
    if not os.path.exists(token_path):
        print("‚ùå –§–∞–π–ª token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é setup_oauth.py")
        return False
    
    try:
        with open(token_path, 'rb') as token_file:
            creds = pickle.load(token_file)
        
        print(f"‚úÖ –§–∞–π–ª token.pickle –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üìã –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {type(creds)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–∞
        if hasattr(creds, 'valid'):
            print(f"üîê –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π: {creds.valid}")
        
        if hasattr(creds, 'expired'):
            print(f"‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {creds.expired}")
        
        if hasattr(creds, 'expiry'):
            if creds.expiry:
                print(f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {creds.expiry}")
                hours_left = (creds.expiry - datetime.utcnow()).total_seconds() / 3600
                if hours_left > 0:
                    print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left:.1f} —á–∞—Å–æ–≤")
                else:
                    print(f"‚ö†Ô∏è –ò—Å—Ç–µ–∫ {abs(hours_left):.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
        
        if hasattr(creds, 'scopes'):
            print(f"üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: {creds.scopes}")
        
        if hasattr(creds, 'refresh_token'):
            has_refresh = bool(creds.refresh_token)
            print(f"üîÑ Refresh token: {'–ï—Å—Ç—å' if has_refresh else '–ù–µ—Ç'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è token.pickle: {e}")
        return False

def test_google_drive_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from googleapiclient.discovery import build
        from googleapiclient.errors import HttpError
        
        print("‚úÖ Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
    except ImportError as e:
        print(f"‚ùå Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    token_path = "token.pickle"
    if not os.path.exists(token_path):
        print("‚ùå token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(token_path, 'rb') as token_file:
            creds = pickle.load(token_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω...")
                creds.refresh(Request())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                with open(token_path, 'wb') as token_file:
                    pickle.dump(creds, token_file)
                print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω")
                return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Drive API...")
        service = build('drive', 'v3', credentials=creds)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        about = service.about().get(fields="user,storageQuota").execute()
        
        user_info = about.get('user', {})
        storage_info = about.get('storageQuota', {})
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('displayName', 'N/A')}")
        print(f"üìß Email: {user_info.get('emailAddress', 'N/A')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if storage_info:
            limit = int(storage_info.get('limit', 0))
            usage = int(storage_info.get('usage', 0))
            
            if limit > 0:
                used_gb = usage / (1024**3)
                total_gb = limit / (1024**3)
                free_gb = total_gb - used_gb
                usage_percent = (usage / limit) * 100
                
                print(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {used_gb:.1f}GB / {total_gb:.1f}GB ({usage_percent:.1f}%)")
                print(f"üìÅ –°–≤–æ–±–æ–¥–Ω–æ: {free_gb:.1f}GB")
                
                if usage_percent > 90:
                    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
                elif usage_percent > 95:
                    print("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        print("\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏...")
        test_folder_name = f"VideoBot_Test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        folder_metadata = {
            'name': test_folder_name,
            'mimeType': 'application/vnd.google-apps.folder'
        }
        
        folder = service.files().create(body=folder_metadata, fields='id,name').execute()
        folder_id = folder.get('id')
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder.get('name')} (ID: {folder_id})")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
        service.files().delete(fileId=folder_id).execute()
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        return True
        
    except HttpError as e:
        print(f"‚ùå Google Drive API –æ—à–∏–±–∫–∞: {e}")
        if e.resp.status == 403:
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API –∏–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        elif e.resp.status == 401:
            print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_upload_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–æ–¥–∞ –±–æ—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∏–∑ –±–æ—Ç–∞
        from app.services.google_drive import GoogleDriveService
        
        print("‚úÖ GoogleDriveService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        drive_service = GoogleDriveService()
        
        if drive_service.credentials:
            print("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º")
            print(f"üîê –¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {getattr(drive_service, 'auth_type', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(drive_service, 'upload_multiple_files'):
                print("‚úÖ –ú–µ—Ç–æ–¥ upload_multiple_files –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå –ú–µ—Ç–æ–¥ upload_multiple_files –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return True
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return False
            
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å GoogleDriveService: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ VideoGenerator3000 - Google Drive Test")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìã –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    for file in os.listdir('.'):
        if file.endswith(('.pickle', '.json', '.py')):
            print(f"   - {file}")
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ token.pickle
    token_ok = test_token_pickle()
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive
    if token_ok:
        connection_ok = test_google_drive_connection()
    else:
        connection_ok = False
    
    # –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
    upload_ok = test_upload_function()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"üîê Token.pickle: {'‚úÖ OK' if token_ok else '‚ùå FAIL'}")
    print(f"üîó Google Drive API: {'‚úÖ OK' if connection_ok else '‚ùå FAIL'}")
    print(f"üß™ Upload —Ñ—É–Ω–∫—Ü–∏—è: {'‚úÖ OK' if upload_ok else '‚ùå FAIL'}")
    
    if all([token_ok, connection_ok, upload_ok]):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! Google Drive –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        
        if not token_ok:
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: python setup_oauth.py")
        if not connection_ok:
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Google Drive")
        if not upload_ok:
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ GoogleDriveService")
        
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
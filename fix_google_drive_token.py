#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å token.pickle –¥–ª—è Google Drive –≤ Google Colab
"""
import os
import sys
import logging
import pickle
import shutil
from pathlib import Path
import base64
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/content/videobot/logs/token_fix.log')
    ]
)
logger = logging.getLogger(__name__)

def fix_token_pickle():
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å token.pickle –¥–ª—è Google Drive
    
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ token.pickle
    2. –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞
    3. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–∑ token.pickle.b64
    """
    logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å token.pickle")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    source_token = Path("token.pickle")
    b64_token = Path("token.pickle.b64")
    target_paths = [
        Path("/content/videobot/token.pickle"),
        Path("app/token.pickle")
    ]
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ token.pickle
    if source_token.exists():
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª token.pickle ({source_token.stat().st_size} –±–∞–π—Ç)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        try:
            with open(source_token, 'rb') as f:
                token_data = pickle.load(f)
            logger.info(f"‚úÖ –§–∞–π–ª token.pickle —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            if hasattr(token_data, 'valid'):
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {token_data.valid}")
            if hasattr(token_data, 'expired'):
                logger.info(f"‚è±Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {token_data.expired}")
            if hasattr(token_data, 'token_uri'):
                logger.info(f"üîó URI —Ç–æ–∫–µ–Ω–∞: {token_data.token_uri}")
            if hasattr(token_data, 'scopes'):
                logger.info(f"üîë –û–±–ª–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞: {token_data.scopes}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ token.pickle: {e}")
            logger.info("‚ö†Ô∏è –§–∞–π–ª token.pickle –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ token.pickle.b64")
            source_token = None
    else:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω")
        source_token = None
    
    # 2. –ï—Å–ª–∏ token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–∑ token.pickle.b64
    if source_token is None and b64_token.exists():
        logger.info(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å token.pickle –∏–∑ token.pickle.b64")
        
        try:
            # –ß–∏—Ç–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ
            with open(b64_token, 'r') as f:
                b64_data = f.read().strip()
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            binary_data = base64.b64decode(b64_data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ token.pickle
            with open("token.pickle", 'wb') as f:
                f.write(binary_data)
            
            logger.info(f"‚úÖ –§–∞–π–ª token.pickle —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ token.pickle.b64")
            source_token = Path("token.pickle")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try:
                with open(source_token, 'rb') as f:
                    token_data = pickle.load(f)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π token.pickle —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ token.pickle: {e}")
                source_token = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è token.pickle –∏–∑ token.pickle.b64: {e}")
            source_token = None
    
    # 3. –ö–æ–ø–∏—Ä—É–µ–º token.pickle –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞
    if source_token:
        for target_path in target_paths:
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                target_path.parent.mkdir(parents=True, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(source_token, target_path)
                logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ token.pickle –≤ {target_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è token.pickle –≤ {target_path}: {e}")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π token.pickle")
        return False
    
    return True

def fix_google_drive_service():
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç GoogleDriveService –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å token.pickle
    
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ app/services/google_drive.py
    2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ token.pickle
    """
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º GoogleDriveService –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å token.pickle")
    
    service_file = Path("app/services/google_drive.py")
    
    if not service_file.exists():
        logger.error(f"‚ùå –§–∞–π–ª {service_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if "token_path = \"token.pickle\"" in content and "if not creds:" in content:
            logger.info("üîç –ù–∞–π–¥–µ–Ω –∫–æ–¥, —Ç—Ä–µ–±—É—é—â–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ token.pickle
            content = content.replace(
                'token_path = "token.pickle"',
                'token_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "token.pickle")'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            content = content.replace(
                "logger.info(\"Loaded existing OAuth credentials from token.pickle\")",
                "logger.info(f\"Loaded existing OAuth credentials from {token_path} (size: {os.path.getsize(token_path) if os.path.exists(token_path) else 'N/A'} bytes)\")"
            )
            
            # –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
            content = content.replace(
                "logger.error(f\"Failed to load OAuth token: {e}\")",
                "logger.error(f\"Failed to load OAuth token from {token_path}: {e}\")"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(service_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info("‚úÖ GoogleDriveService —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            return True
        else:
            logger.info("‚úÖ GoogleDriveService –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è GoogleDriveService: {e}")
        return False

def check_google_drive_integration():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Drive
    
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ token.pickle
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ google-credentials.json
    4. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Drive")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from google_auth_oauthlib.flow import InstalledAppFlow
        from googleapiclient.discovery import build
        logger.info("‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ token.pickle
    token_paths = [
        Path("token.pickle"),
        Path("/content/videobot/token.pickle"),
        Path("app/token.pickle")
    ]
    
    token_found = False
    for token_path in token_paths:
        if token_path.exists():
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω token.pickle: {token_path} ({token_path.stat().st_size} –±–∞–π—Ç)")
            token_found = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
            try:
                with open(token_path, 'rb') as f:
                    token_data = pickle.load(f)
                logger.info(f"‚úÖ –§–∞–π–ª {token_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {token_path}: {e}")
    
    if not token_found:
        logger.error("‚ùå –§–∞–π–ª token.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ google-credentials.json
    creds_path = Path("google-credentials.json")
    if creds_path.exists():
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω google-credentials.json ({creds_path.stat().st_size} –±–∞–π—Ç)")
    else:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª google-credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive
    try:
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from googleapiclient.discovery import build
        
        creds = None
        token_path = "token.pickle"
        
        if os.path.exists(token_path):
            with open(token_path, 'rb') as token:
                creds = pickle.load(token)
        
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω...")
                creds.refresh(Request())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                with open(token_path, 'wb') as token:
                    pickle.dump(creds, token)
                logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        service = build('drive', 'v3', credentials=creds)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        results = service.files().list(pageSize=1, fields="files(id, name)").execute()
        files = results.get('files', [])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        about = service.about().get(fields="user").execute()
        user_info = about.get('user', {})
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('emailAddress', 'N/A')}")
        logger.info(f"üìÅ –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º: {len(files) > 0}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîß VideoGenerator3000 - Google Drive Token Fix")
    logger.info("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º token.pickle
    token_fixed = fix_token_pickle()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º GoogleDriveService
    service_fixed = fix_google_drive_service()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Drive
    integration_ok = check_google_drive_integration()
    
    logger.info("=" * 50)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ token.pickle: {'–£—Å–ø–µ—à–Ω–æ' if token_fixed else '–û—à–∏–±–∫–∞'}")
    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GoogleDriveService: {'–£—Å–ø–µ—à–Ω–æ' if service_fixed else '–û—à–∏–±–∫–∞'}")
    logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Drive: {'–†–∞–±–æ—Ç–∞–µ—Ç' if integration_ok else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if token_fixed and service_fixed and integration_ok:
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Google Drive —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω—ã!")
    else:
        logger.info("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Google Drive –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–º–∏.")
        logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not token_fixed:
            logger.info("1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π token.pickle: python setup_oauth.py")
        if not service_fixed:
            logger.info("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤ app/services/google_drive.py")
        if not integration_ok:
            logger.info("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive: python test_google_drive.py")

if __name__ == "__main__":
    main() 
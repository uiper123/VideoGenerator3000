#!/usr/bin/env python3
"""
Enhanced Worker Logger - –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Celery tasks
"""
import os
import logging
import sys
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è worker'–æ–≤
def setup_worker_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Celery worker'–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - [WORKER:%(process)d] - %(message)s'
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è worker'–æ–≤
    worker_logger = logging.getLogger('app.workers')
    worker_logger.setLevel(logging.DEBUG)
    
    # –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ worker'–æ–≤
    worker_handler = logging.FileHandler('logs/worker.log')
    worker_handler.setLevel(logging.DEBUG)
    worker_handler.setFormatter(formatter)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è worker'–æ–≤
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    worker_logger.addHandler(worker_handler)
    worker_logger.addHandler(console_handler)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    video_logger = logging.getLogger('app.video_processing')
    video_logger.setLevel(logging.DEBUG)
    video_logger.addHandler(worker_handler)
    video_logger.addHandler(console_handler)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è Celery
    celery_logger = logging.getLogger('celery')
    celery_logger.setLevel(logging.INFO)
    celery_logger.addHandler(worker_handler)
    
    return worker_logger

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
def log_task_execution(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    def wrapper(self, *args, **kwargs):
        logger = logging.getLogger('app.workers')
        task_name = func.__name__
        task_id = getattr(self, 'request', {}).get('id', 'unknown')
        
        logger.info(f"üöÄ TASK START: {task_name} (ID: {task_id})")
        logger.info(f"üìã TASK ARGS: {args}")
        logger.info(f"‚öôÔ∏è TASK KWARGS: {kwargs}")
        
        start_time = datetime.now()
        
        try:
            result = func(self, *args, **kwargs)
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            logger.info(f"‚úÖ TASK SUCCESS: {task_name} (Duration: {duration:.2f}s)")
            logger.info(f"üì§ TASK RESULT: {result}")
            
            return result
            
        except Exception as e:
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            logger.error(f"‚ùå TASK FAILED: {task_name} (Duration: {duration:.2f}s)")
            logger.error(f"üí• TASK ERROR: {str(e)}")
            logger.exception("Full traceback:")
            
            raise
    
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ worker'–æ–≤
def get_worker_logs(lines: int = 50) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ worker'–æ–≤"""
    try:
        log_file = Path("logs/worker.log")
        if not log_file.exists():
            return "‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ worker'–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            recent_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
            
        return ''.join(recent_lines)
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
def cleanup_old_logs(days: int = 7):
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    try:
        logs_dir = Path("logs")
        if not logs_dir.exists():
            return
        
        import time
        current_time = time.time()
        cutoff_time = current_time - (days * 24 * 60 * 60)
        
        for log_file in logs_dir.glob("*.log"):
            if log_file.stat().st_mtime < cutoff_time:
                log_file.unlink()
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_worker_logging()
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è worker'–æ–≤")
    logger.debug("üîç Debug —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.warning("‚ö†Ô∏è Warning —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.error("‚ùå Error —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
    print(get_worker_logs(10))
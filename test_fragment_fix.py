#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å 8-—Å–µ–∫—É–Ω–¥–Ω—ã–º–∏ —á–∞–Ω–∫–∞–º–∏.
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.video_processing.processor import VideoProcessor
from app.config.constants import MIN_FRAGMENT_DURATION, MAX_FRAGMENT_DURATION

def test_fragment_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ."""
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "name": "38-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –ø–æ 30 —Å–µ–∫",
            "total_duration": 38,
            "fragment_duration": 30,
            "expected_fragments": 2,  # 30 —Å–µ–∫ + 8 —Å–µ–∫ (–Ω–æ 8 < 15, –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ 1)
            "expected_durations": [30]  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç 30 —Å–µ–∫, 8 —Å–µ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
        },
        {
            "name": "45-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –ø–æ 30 —Å–µ–∫", 
            "total_duration": 45,
            "fragment_duration": 30,
            "expected_fragments": 2,  # 30 —Å–µ–∫ + 15 —Å–µ–∫
            "expected_durations": [30, 15]
        },
        {
            "name": "50-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –ø–æ 30 —Å–µ–∫",
            "total_duration": 50, 
            "fragment_duration": 30,
            "expected_fragments": 2,  # 30 —Å–µ–∫ + 20 —Å–µ–∫
            "expected_durations": [30, 20]
        },
        {
            "name": "10-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ (–∫–æ—Ä–æ—á–µ –º–∏–Ω–∏–º—É–º–∞)",
            "total_duration": 10,
            "fragment_duration": 30, 
            "expected_fragments": 1,  # –û–¥–∏–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –≤–∏–¥–µ–æ
            "expected_durations": [10]
        },
        {
            "name": "90-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –ø–æ 30 —Å–µ–∫",
            "total_duration": 90,
            "fragment_duration": 30,
            "expected_fragments": 3,  # 30 + 30 + 30
            "expected_durations": [30, 30, 30]
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤...")
    print(f"MIN_FRAGMENT_DURATION = {MIN_FRAGMENT_DURATION} —Å–µ–∫")
    print(f"MAX_FRAGMENT_DURATION = {MAX_FRAGMENT_DURATION} —Å–µ–∫")
    print()
    
    for test_case in test_cases:
        print(f"üìã –¢–µ—Å—Ç: {test_case['name']}")
        
        total_duration = test_case['total_duration']
        fragment_duration = test_case['fragment_duration']
        
        # –õ–æ–≥–∏–∫–∞ –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        if total_duration < MIN_FRAGMENT_DURATION:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: –≤–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ –º–∏–Ω–∏–º—É–º–∞
            total_fragments = 1
            num_full_fragments = 0
            create_remainder_fragment = True
            remainder = total_duration
        else:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            num_full_fragments = int(total_duration // fragment_duration)
            remainder = total_duration % fragment_duration
            create_remainder_fragment = remainder >= MIN_FRAGMENT_DURATION
            total_fragments = num_full_fragments + (1 if create_remainder_fragment else 0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        actual_durations = []
        for i in range(total_fragments):
            if total_duration < MIN_FRAGMENT_DURATION:
                actual_duration = total_duration
            else:
                start_time = i * fragment_duration
                
                if i == num_full_fragments and create_remainder_fragment:
                    actual_duration = remainder
                else:
                    actual_duration = fragment_duration
                
                if start_time + actual_duration > total_duration:
                    actual_duration = total_duration - start_time
                    if actual_duration < MIN_FRAGMENT_DURATION and total_duration >= MIN_FRAGMENT_DURATION:
                        break
            
            actual_durations.append(actual_duration)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"   –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} —Å–µ–∫")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {fragment_duration} —Å–µ–∫")
        print(f"   –û–∂–∏–¥–∞–µ–º–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {test_case['expected_fragments']}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(actual_durations)}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {test_case['expected_durations']}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {actual_durations}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        if len(actual_durations) == test_case['expected_fragments']:
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ")
        else:
            print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        
        if actual_durations == test_case['expected_durations']:
            print("   ‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
        else:
            print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        
        print()

if __name__ == "__main__":
    test_fragment_logic()
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: videobot_postgres
    environment:
      POSTGRES_DB: videobot
      POSTGRES_USER: videobot
      POSTGRES_PASSWORD: videobot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videobot -d videobot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    container_name: videobot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Video Bot Application
  videobot:
    build: .
    container_name: videobot_app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://videobot:videobot_password@postgres:5432/videobot
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - video_temp:/tmp/videos
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Worker for video processing
  celery_worker:
    build: .
    container_name: videobot_celery_worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://videobot:videobot_password@postgres:5432/videobot
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - video_temp:/tmp/videos
      - ./fonts:/app/fonts
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery_beat:
    build: .
    container_name: videobot_celery_beat
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://videobot:videobot_password@postgres:5432/videobot
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./fonts:/app/fonts
    command: celery -A app.workers.celery_app beat --loglevel=info
    restart: unless-stopped

  # Flower for Celery monitoring (optional) - temporarily disabled
  # flower:
  #   build: .
  #   container_name: videobot_flower
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/1
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/2
  #   ports:
  #     - "5555:5555"
  #   command: celery -A app.workers.celery_app flower --port=5555
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  video_temp:
    driver: local

networks:
  default:
    name: videobot_network 
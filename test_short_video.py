#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ (8 —Å–µ–∫—É–Ω–¥).
"""
import os
import sys
import tempfile
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('/app')

from app.video_processing.processor import VideoProcessor
from app.config.constants import MIN_FRAGMENT_DURATION

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_short_video_processing():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ (8 —Å–µ–∫—É–Ω–¥).
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ...")
    print(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {MIN_FRAGMENT_DURATION} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        processor = VideoProcessor(temp_dir)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 8 —Å–µ–∫—É–Ω–¥ —Å –ø–æ–º–æ—â—å—é FFmpeg
        test_video_path = os.path.join(temp_dir, "test_8sec.mp4")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ 8 —Å–µ–∫—É–Ω–¥ (—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã —Å –∞—É–¥–∏–æ)
        cmd = [
            'ffmpeg',
            '-f', 'lavfi',
            '-i', 'testsrc2=duration=8:size=1920x1080:rate=30',
            '-f', 'lavfi', 
            '-i', 'sine=frequency=1000:duration=8',
            '-c:v', 'libx264',
            '-c:a', 'aac',
            '-t', '8',
            '-y',
            test_video_path
        ]
        
        import subprocess
        try:
            subprocess.run(cmd, check=True, capture_output=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {test_video_path}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        try:
            video_info = processor.get_video_info(test_video_path)
            print(f"üìπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:")
            print(f"   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']} —Å–µ–∫—É–Ω–¥")
            print(f"   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video_info['width']}x{video_info['height']}")
            print(f"   - FPS: {video_info['fps']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        try:
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ create_fragments...")
            fragments = processor.create_fragments(
                video_path=test_video_path,
                fragment_duration=30,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 30 —Å–µ–∫—É–Ω–¥, –Ω–æ –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ 8 —Å–µ–∫—É–Ω–¥
                quality="1080p",
                title="–¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ"
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(fragments)}")
            for i, fragment in enumerate(fragments):
                print(f"   –§—Ä–∞–≥–º–µ–Ω—Ç {i+1}:")
                print(f"     - –§–∞–π–ª: {fragment['filename']}")
                print(f"     - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {fragment['duration']} —Å–µ–∫")
                print(f"     - –†–∞–∑–º–µ—Ä: {fragment['size_bytes']} –±–∞–π—Ç")
                print(f"     - –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(fragment['local_path'])}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
        try:
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ create_fragments_with_subtitles...")
            fragments_with_subs = processor.create_fragments_with_subtitles(
                video_path=test_video_path,
                fragment_duration=30,
                quality="1080p",
                title="–¢–µ—Å—Ç —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏",
                subtitle_style="modern"
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {len(fragments_with_subs)}")
            for i, fragment in enumerate(fragments_with_subs):
                print(f"   –§—Ä–∞–≥–º–µ–Ω—Ç {i+1}:")
                print(f"     - –§–∞–π–ª: {fragment['filename']}")
                print(f"     - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {fragment['duration']} —Å–µ–∫")
                print(f"     - –†–∞–∑–º–µ—Ä: {fragment['size_bytes']} –±–∞–π—Ç")
                print(f"     - –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(fragment['local_path'])}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {e}")
            return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

if __name__ == "__main__":
    success = test_short_video_processing()
    sys.exit(0 if success else 1)
"""
Video processing handlers for the Telegram bot.
"""
import uuid
import re
from typing import Union
from urllib.parse import urlparse

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.bot.keyboards.main_menu import (
    VideoAction,
    VideoTaskAction,
    SettingsValueAction,
    get_video_settings_keyboard,
    get_cancel_keyboard,
    get_back_keyboard,
    get_task_status_keyboard
)
from app.config.constants import VideoStatus, SUPPORTED_SOURCES, ERROR_MESSAGES, SUCCESS_MESSAGES
from app.database.connection import get_db_session
from app.database.models import VideoTask, User, VideoFragment

router = Router()


class VideoProcessingStates(StatesGroup):
    """States for video processing workflow."""
    waiting_for_url = State()
    waiting_for_file = State()
    configuring_settings = State()
    processing = State()
    waiting_for_title = State()


@router.callback_query(VideoAction.filter(F.action == "input_url"))
async def start_url_input(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Start URL input process.
    
    Args:
        callback: Callback query
        state: FSM context
    """
    await state.set_state(VideoProcessingStates.waiting_for_url)
    
    # Initialize default settings if not present
    data = await state.get_data()
    if "settings" not in data:
        await state.update_data(settings={
            "fragment_duration": 30,
            "quality": "1080p",
            "enable_subtitles": True
        })
    
    text = """
üìé <b>–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>
‚Ä¢ YouTube (youtube.com, youtu.be)
‚Ä¢ TikTok (tiktok.com)
‚Ä¢ Instagram (instagram.com)
‚Ä¢ Vimeo (vimeo.com)
‚Ä¢ Twitter/X (twitter.com, x.com)

<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(VideoProcessingStates.waiting_for_url)
async def process_url_input(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    Process URL input from user.
    
    Args:
        message: User message with URL
        state: FSM context
        bot: Bot instance
    """
    url = message.text.strip()
    
    # Validate URL
    if not is_valid_video_url(url):
        await message.answer(
            ERROR_MESSAGES["invalid_url"],
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # Store URL in state data
    await state.update_data(source_url=url, input_type="url")
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Show video settings
    await show_video_settings(message, state, url)


@router.callback_query(VideoAction.filter(F.action == "upload_file"))
async def start_file_upload(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Start file upload process.
    
    Args:
        callback: Callback query
        state: FSM context
    """
    await state.set_state(VideoProcessingStates.waiting_for_file)
    
    text = """
üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ MP4, AVI, MKV, MOV
‚Ä¢ WMV, FLV, WebM, M4V

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2GB
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 —á–∞—Å–∞

<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(VideoProcessingStates.waiting_for_file, F.video | F.document)
async def process_file_upload(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    Process file upload from user.
    
    Args:
        message: User message with file
        state: FSM context
        bot: Bot instance
    """
    # Get file info
    if message.video:
        file_info = message.video
        file_name = f"video_{message.video.file_unique_id}.mp4"
    elif message.document:
        file_info = message.document
        file_name = message.document.file_name or f"document_{message.document.file_unique_id}"
    else:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # Check file size (Telegram limit is usually 50MB for bots)
    if file_info.file_size and file_info.file_size > 50 * 1024 * 1024:
        await message.answer(
            ERROR_MESSAGES["file_too_large"],
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # Store file info in state data
    await state.update_data(
        file_id=file_info.file_id,
        file_name=file_name,
        file_size=file_info.file_size,
        input_type="file"
    )
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Show video settings
    await show_video_settings(message, state, f"–§–∞–π–ª: {file_name}")


async def show_video_settings(message: Union[Message, CallbackQuery], state: FSMContext, source: str) -> None:
    """
    Show video processing settings.
    
    Args:
        message: Message or callback query
        state: FSM context
        source: Video source description
    """
    # Get current settings from state or use defaults
    data = await state.get_data()
    settings = data.get("settings", {
        "fragment_duration": 30,
        "quality": "1080p",
        "enable_subtitles": True,
        "title": "",
        "add_part_numbers": False
    })
    
    title_text = settings.get('title', '')
    title_display = f'"{title_text}"' if title_text else '–ù–µ –∑–∞–¥–∞–Ω'
    part_numbers_status = '–í–∫–ª—é—á–µ–Ω–∞' if settings.get('add_part_numbers', False) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'
    
    text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>

üìπ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source[:50]}{'...' if len(source) > 50 else ''}

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {settings['fragment_duration']} —Å–µ–∫
üìä –ö–∞—á–µ—Å—Ç–≤–æ: {settings['quality']}
üìù –°—É–±—Ç–∏—Ç—Ä—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if settings['enable_subtitles'] else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title_display}
üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è —á–∞—Å—Ç–µ–π: {part_numbers_status}

<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
üé¨ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–æ—Ä—Ç—Å—ã —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º
üì± –§–æ—Ä–º–∞—Ç 9:16 –¥–ª—è TikTok/YouTube Shorts
üéØ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ —Å–ª–æ–≤–∞–º

<b>–û –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —á–∞—Å—Ç–µ–π:</b>
{'‚úÖ –ö –Ω–∞–∑–≤–∞–Ω–∏—è–º –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è "–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2" –∏ —Ç.–¥.' if settings.get('add_part_numbers', False) else '‚ùå –ù–∞–∑–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç)'}

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """
    
    # Create dynamic keyboard with current settings
    from app.bot.keyboards.main_menu import InlineKeyboardBuilder, SettingsValueAction, VideoAction, MenuAction, MENU_EMOJIS
    
    builder = InlineKeyboardBuilder()
    
    # Duration settings
    builder.button(
        text="‚è±Ô∏è 15 —Å–µ–∫",
        callback_data=SettingsValueAction(action="duration", value="15")
    )
    builder.button(
        text="‚è±Ô∏è 30 —Å–µ–∫",
        callback_data=SettingsValueAction(action="duration", value="30")
    )
    builder.button(
        text="‚è±Ô∏è 60 —Å–µ–∫",
        callback_data=SettingsValueAction(action="duration", value="60")
    )
    builder.button(
        text="‚è±Ô∏è –ö–∞—Å—Ç–æ–º",
        callback_data=SettingsValueAction(action="duration", value="custom")
    )
    
    # Quality settings
    builder.button(
        text="üìä 720p",
        callback_data=SettingsValueAction(action="quality", value="720p")
    )
    builder.button(
        text="üìä 1080p",
        callback_data=SettingsValueAction(action="quality", value="1080p")
    )
    builder.button(
        text="üìä 4K",
        callback_data=SettingsValueAction(action="quality", value="4k")
    )
    
    # Subtitle settings
    subtitles_text = "üìù –°—É–±—Ç–∏—Ç—Ä—ã: –í–ö–õ" if settings.get('enable_subtitles', True) else "üìù –°—É–±—Ç–∏—Ç—Ä—ã: –í–´–ö–õ"
    builder.button(
        text=subtitles_text,
        callback_data=SettingsValueAction(action="subtitles", value="toggle")
    )
    
    # Title setting
    builder.button(
        text="üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫",
        callback_data=SettingsValueAction(action="title", value="set")
    )
    
    # Part numbering setting with dynamic text
    part_numbers_text = "üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è —á–∞—Å—Ç–µ–π: –í–ö–õ" if settings.get('add_part_numbers', False) else "üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è —á–∞—Å—Ç–µ–π: –í–´–ö–õ"
    builder.button(
        text=part_numbers_text,
        callback_data=SettingsValueAction(action="part_numbers", value="toggle")
    )
    
    # Confirm button
    builder.button(
        text="‚úÖ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
        callback_data=VideoAction(action="start_processing")
    )
    
    # Back button
    builder.button(
        text=f"{MENU_EMOJIS['back']} –ù–∞–∑–∞–¥",
        callback_data=MenuAction(action="video_menu")
    )
    
    # Arrange buttons: 4 duration, 3 quality, 1 subtitles, 1 title, 1 part numbers, 1 confirm, 1 back
    builder.adjust(4, 3, 1, 1, 1, 1, 1)
    
    keyboard = builder.as_markup()
    
    if isinstance(message, Message):
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(SettingsValueAction.filter(F.action == "duration"))
async def update_duration_setting(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """
    Update fragment duration setting.
    
    Args:
        callback: Callback query
        callback_data: Settings action data
        state: FSM context
    """
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {
        "fragment_duration": 30,
        "quality": "1080p",
        "enable_subtitles": True
    })
    
    # Ensure we're in the right state
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Update duration
    if callback_data.value == "custom":
        # TODO: Implement custom duration input
        duration = 45  # Placeholder
    else:
        duration = int(callback_data.value)
    
    settings["fragment_duration"] = duration
    await state.update_data(settings=settings)
    
    # Show updated settings
    source = data.get("source_url", data.get("file_name", "Unknown"))
    await show_video_settings(callback, state, source)


@router.callback_query(SettingsValueAction.filter(F.action == "quality"))
async def update_quality_setting(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """
    Update video quality setting.
    
    Args:
        callback: Callback query
        callback_data: Settings action data
        state: FSM context
    """
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {
        "fragment_duration": 30,
        "quality": "1080p",
        "enable_subtitles": True
    })
    
    # Ensure we're in the right state
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Update quality
    settings["quality"] = callback_data.value
    await state.update_data(settings=settings)
    
    # Show updated settings
    source = data.get("source_url", data.get("file_name", "Unknown"))
    await show_video_settings(callback, state, source)


@router.callback_query(SettingsValueAction.filter(F.action == "subtitles"))
async def toggle_subtitles_setting(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Toggle subtitles setting.
    
    Args:
        callback: Callback query
        state: FSM context
    """
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {
        "fragment_duration": 30,
        "quality": "1080p",
        "enable_subtitles": True
    })
    
    # Ensure we're in the right state
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Toggle subtitles
    settings["enable_subtitles"] = not settings.get("enable_subtitles", True)
    await state.update_data(settings=settings)
    
    # Show updated settings
    source = data.get("source_url", data.get("file_name", "Unknown"))
    await show_video_settings(callback, state, source)


@router.callback_query(SettingsValueAction.filter(F.action == "part_numbers"))
async def toggle_part_numbers_setting(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Toggle part numbers setting.
    
    Args:
        callback: Callback query
        state: FSM context
    """
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {
        "fragment_duration": 30,
        "quality": "1080p",
        "enable_subtitles": True,
        "add_part_numbers": False
    })
    
    # Ensure we're in the right state
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Toggle part numbers
    settings["add_part_numbers"] = not settings.get("add_part_numbers", False)
    await state.update_data(settings=settings)
    
    # Show updated settings
    source = data.get("source_url", data.get("file_name", "Unknown"))
    await show_video_settings(callback, state, source)


@router.callback_query(SettingsValueAction.filter(F.action == "title"))
async def set_title_setting(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Set title for video fragments.
    
    Args:
        callback: Callback query
        state: FSM context
    """
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {
        "fragment_duration": 30,
        "quality": "1080p",
        "enable_subtitles": True,
        "title": ""
    })
    
    # Ensure we're in the right state
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    text = """
üìã <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–¢–æ–ø-5 –ª–∞–π—Ñ—Ö–∞–∫–æ–≤"
‚Ä¢ "–û–±–∑–æ—Ä iPhone 15"
‚Ä¢ "–†–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞"

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"</i>
    """
    
    from app.bot.keyboards.main_menu import InlineKeyboardBuilder, SettingsValueAction, MenuAction
    
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üö´ –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
        callback_data=SettingsValueAction(action="title_set", value="")
    )
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=MenuAction(action="video_menu")
    )
    builder.adjust(1, 1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    # Set state to wait for title input
    await state.set_state(VideoProcessingStates.waiting_for_title)


@router.message(VideoProcessingStates.waiting_for_title)
async def process_title_input(message: Message, state: FSMContext) -> None:
    """
    Process title input from user.
    
    Args:
        message: User message with title
        state: FSM context
    """
    title = message.text.strip()
    
    # Validate title length
    if len(title) > 50:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {})
    
    # Update title
    settings["title"] = title
    await state.update_data(settings=settings)
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Show updated settings
    source = data.get("source_url", data.get("file_name", "Unknown"))
    await show_video_settings(message, state, source)


@router.callback_query(SettingsValueAction.filter(F.action == "title_set"))
async def set_title_value(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """
    Set title value directly from callback.
    
    Args:
        callback: Callback query
        callback_data: Settings action data
        state: FSM context
    """
    # Get current state data
    data = await state.get_data()
    settings = data.get("settings", {})
    
    # Update title
    settings["title"] = callback_data.value
    await state.update_data(settings=settings)
    await state.set_state(VideoProcessingStates.configuring_settings)
    
    # Show updated settings
    source = data.get("source_url", data.get("file_name", "Unknown"))
    await show_video_settings(callback, state, source)


@router.callback_query(VideoAction.filter(F.action == "start_processing"))
async def start_video_processing(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    Start video processing.
    
    Args:
        callback: Callback query
        state: FSM context
        bot: Bot instance
    """
    user_id = callback.from_user.id
    data = await state.get_data()
    
    async with get_db_session() as session:
        # Check for existing active tasks
        from sqlalchemy import select
        existing_task = await session.scalar(
            select(VideoTask).where(
                VideoTask.user_id == user_id,
                VideoTask.status.in_([VideoStatus.PENDING, VideoStatus.DOWNLOADING, VideoStatus.PROCESSING, VideoStatus.UPLOADING])
            )
        )
        
        if existing_task:
            await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!", show_alert=True)
            return
        
        # Create video task in database
        task_id = str(uuid.uuid4())
        
        # Get or create user
        user = await session.get(User, user_id)
        if not user:
            user = User(
                id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name
            )
            session.add(user)
        
        # Create video task
        video_task = VideoTask(
            id=task_id,
            user_id=user_id,
            source_url=data.get("source_url"),
            original_filename=data.get("file_name"),
            status=VideoStatus.PENDING,
            settings=data.get("settings", {}),
            metadata={}
        )
        session.add(video_task)
        await session.commit()
    
    # Start processing workflow
    await state.set_state(VideoProcessingStates.processing)
    await state.update_data(task_id=task_id)
    
    text = f"""
üöÄ <b>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>

üìã ID –∑–∞–¥–∞—á–∏: <code>{task_id}</code>
‚è±Ô∏è –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: 2-4 –º–∏–Ω—É—Ç—ã

<b>–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>
1. ‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...
2. ‚è≥ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Shorts...
3. ‚è≥ –ù–∞—Ä–µ–∑–∫–∞ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã...
4. ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive...
5. ‚è≥ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Google –¢–∞–±–ª–∏—Ü—ã...
6. ‚è≥ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:</b>
‚Ä¢ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Drive
‚Ä¢ –í–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Google Sheets

–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_task_status_keyboard(task_id),
        parse_mode="HTML"
    )
    
    # Start optimized Celery task chain
    from app.workers.video_tasks import process_video_chain_optimized
    from app.video_processing.downloader import VideoDownloader

    if data.get("input_type") == "url":
        # Process from URL with optimized workflow
        source_url = data.get("source_url")
        settings = data.get("settings", {})

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        try:
            downloader = VideoDownloader()
            info = downloader.get_video_info(source_url)
            duration_sec = int(info.get('duration', 0))
        except Exception as e:
            duration_sec = 0  # fallback

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        def get_time_limit_for_video(video_duration_sec):
            base = video_duration_sec * 1.5 * 1.2
            return int(min(max(base, 600), 10800))  # –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 3 —á–∞—Å–æ–≤

        soft_limit = get_time_limit_for_video(duration_sec)
        hard_limit = soft_limit + 300  # +5 –º–∏–Ω—É—Ç –∑–∞–ø–∞—Å

        # –ü–µ—Ä–µ–¥–∞—ë–º ffmpeg_timeout –≤ settings (–Ω–∞ 1 –º–∏–Ω—É—Ç—É –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ –∑–∞–¥–∞—á–∏)
        settings['ffmpeg_timeout'] = max(soft_limit - 60, 300)

        process_video_chain_optimized.apply_async(
            args=[task_id, source_url, settings],
            soft_time_limit=soft_limit,
            time_limit=hard_limit
        )
    else:
        # Process from uploaded file
        # TODO: Implement file processing
        await callback.message.edit_text(
            "‚ùå <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.",
            parse_mode="HTML"
        )
        return


@router.callback_query(VideoAction.filter(F.action == "my_tasks"))
async def show_my_tasks(callback: CallbackQuery) -> None:
    """
    Show user's video processing tasks.
    
    Args:
        callback: Callback query
    """
    user_id = callback.from_user.id
    
    # TODO: Get actual tasks from database
    text = """
üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.

–ù–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏ –∑–¥–µ—Å—å.
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("video_menu"),
        parse_mode="HTML"
    )


@router.callback_query(VideoAction.filter(F.action == "batch_processing"))
async def start_batch_processing(callback: CallbackQuery) -> None:
    """
    Start batch processing mode.
    
    Args:
        callback: Callback query
    """
    text = """
üìã <b>–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</b>

–†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
2. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≤–∏–¥–µ–æ

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 30 –º–∏–Ω—É—Ç
‚Ä¢ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ

<i>–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("video_menu"),
        parse_mode="HTML"
    )


@router.callback_query(VideoTaskAction.filter(F.action == "cancel_task"))
async def cancel_task(callback: CallbackQuery, callback_data: VideoTaskAction) -> None:
    """
    Cancel video processing task.
    
    Args:
        callback: Callback query
        callback_data: Video action data
    """
    task_id = callback_data.task_id
    
    # TODO: Implement actual task cancellation
    text = f"""
‚ùå <b>–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üìã ID –∑–∞–¥–∞—á–∏: <code>{task_id}</code>
üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 1 –º–∏–Ω 23 —Å–µ–∫
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω—ã: 45%

–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("main_menu"),
        parse_mode="HTML"
    )
    await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(VideoTaskAction.filter(F.action == "refresh_status"))
async def refresh_task_status(callback: CallbackQuery, callback_data: VideoTaskAction) -> None:
    """
    Refresh task status.
    
    Args:
        callback: Callback query
        callback_data: Video action data
    """
    task_id = callback_data.task_id
    
    # Get actual task status from database
    async with get_db_session() as session:
        task = await session.get(VideoTask, task_id)
        if not task:
            await callback.message.edit_text(
                "‚ùå <b>–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>",
                parse_mode="HTML"
            )
            return
        
        # Get fragments count
        from sqlalchemy import select, func
        fragments_count = await session.scalar(
            select(func.count(VideoFragment.id)).where(VideoFragment.task_id == task_id)
        )
        
        # Determine status text and emoji
        status_map = {
            VideoStatus.PENDING: ("‚è≥", "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
            VideoStatus.DOWNLOADING: ("üì•", "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"),
            VideoStatus.PROCESSING: ("‚öôÔ∏è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"),
            VideoStatus.UPLOADING: ("üì§", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
            VideoStatus.COMPLETED: ("‚úÖ", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"),
            VideoStatus.FAILED: ("‚ùå", "–û—à–∏–±–∫–∞")
        }
        
        status_emoji, status_text = status_map.get(task.status, ("‚ùì", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        
        # Calculate elapsed time
        from datetime import datetime
        elapsed = datetime.utcnow() - task.created_at
        elapsed_minutes = int(elapsed.total_seconds() / 60)
        elapsed_seconds = int(elapsed.total_seconds() % 60)
        
        text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏</b>

üìã ID: <code>{task_id}</code>
{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}
‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {task.progress or 0}%
üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_minutes} –º–∏–Ω {elapsed_seconds} —Å–µ–∫

<b>–î–µ—Ç–∞–ª–∏:</b>
üìä –°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {fragments_count or 0}
üìπ –ò—Å—Ç–æ—á–Ω–∏–∫: {task.source_url or task.original_filename or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.settings.get('fragment_duration', 30)} —Å–µ–∫
üìä –ö–∞—á–µ—Å—Ç–≤–æ: {task.settings.get('quality', '1080p')}
üìù –°—É–±—Ç–∏—Ç—Ä—ã: {'–î–∞' if task.settings.get('enable_subtitles', True) else '–ù–µ—Ç'}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ</i>
        """
        
        if task.error_message:
            text += f"\n\n‚ùå <b>–û—à–∏–±–∫–∞:</b> {task.error_message}"
        
        keyboard = get_task_status_keyboard(task_id, can_cancel=(task.status in [VideoStatus.PENDING, VideoStatus.DOWNLOADING, VideoStatus.PROCESSING]))
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )


async def simulate_processing(bot: Bot, user_id: int, task_id: str, chat_id: int) -> None:
    """
    Simulate video processing for demo purposes.
    
    Args:
        bot: Bot instance
        user_id: User ID
        task_id: Task ID
        chat_id: Chat ID for notifications
    """
    import asyncio
    
    # Wait a bit to simulate processing
    await asyncio.sleep(5)
    
    # Send completion notification
    text = f"""
‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìã ID –∑–∞–¥–∞—á–∏: <code>{task_id}</code>
üìä –°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: 8
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3 –º–∏–Ω 24 —Å–µ–∫

<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ 8 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9:16
‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Google Drive

üìÅ <a href="https://drive.google.com/drive/folders/mock">–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –≤ Drive</a>
    """
    
    from app.bot.keyboards.main_menu import get_back_keyboard
    
    await bot.send_message(
        chat_id,
        text,
        reply_markup=get_back_keyboard("main_menu"),
        parse_mode="HTML",
        disable_web_page_preview=True
    )


def is_valid_video_url(url: str) -> bool:
    """
    Validate if URL is a supported video platform.
    
    Args:
        url: URL to validate
        
    Returns:
        bool: True if URL is valid and supported
    """
    try:
        parsed = urlparse(url)
        domain = parsed.netloc.lower()
        
        # Remove 'www.' prefix if present
        if domain.startswith('www.'):
            domain = domain[4:]
        
        # Check if domain is in supported sources
        for source in SUPPORTED_SOURCES:
            if source in domain:
                return True
        
        return False
        
    except Exception:
        return False
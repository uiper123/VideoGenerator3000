"""
Settings handlers for the Telegram bot.
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.bot.keyboards.main_menu import (
    SettingsAction,
    SettingsValueAction,
    StyleAction,
    get_back_keyboard,
    get_confirmation_keyboard,
    get_style_settings_menu_keyboard,
    get_text_settings_keyboard,
    get_color_settings_keyboard,
    get_size_settings_keyboard
)
from app.bot.keyboards.font_keyboards import FontAction
from app.config.constants import MENU_EMOJIS
from app.database.connection import get_db_session
from app.database.models import User
from app.services.user_settings import UserSettingsService, NoSettingsError
from app.bot.handlers.video_handlers import show_video_settings
from app.bot.handlers.video_handlers import VideoProcessingStates

logger = logging.getLogger(__name__)
router = Router()


class SettingsStates(StatesGroup):
    """States for settings management."""
    main = State()
    title_settings = State()
    subtitle_settings = State()


class ProxyStates(StatesGroup):
    input = State()


def parse_proxy_text(text: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è yt-dlp.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å 'SOCKS' ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å socks5://, –∏–Ω–∞—á–µ http://
    """
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    login, password, ip, port = None, None, None, None
    protocol = "http"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é http
    for l in lines:
        if "socks" in l.lower():
            protocol = "socks5"
        elif "http" in l.lower():
            protocol = "http"
    for l in lines:
        if l.count('.') == 3 and all(part.isdigit() for part in l.split('.') if part):
            ip = l
        elif l.isdigit() and len(l) >= 4:
            port = l
        elif not login:
            login = l
        elif not password:
            password = l
    if ip and port and login and password:
        return f"{protocol}://{login}:{password}@{ip}:{port}"
    return ""


@router.callback_query(SettingsAction.filter(F.action == "open_settings_menu"))
async def show_settings_menu(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext) -> None:
    """
    Show settings menu.
    
    Args:
        callback: Callback query
        callback_data: Settings action data
        state: FSM context
    """
    try:
        text = f"""
üé¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ</b>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: 30 —Å–µ–∫
üìä –ö–∞—á–µ—Å—Ç–≤–æ: 1080p
üìù –°—É–±—Ç–∏—Ç—Ä—ã: –í–∫–ª—é—á–µ–Ω—ã
üé® –§–æ—Ä–º–∞—Ç: 9:16 (Shorts)

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å: –ê–≤—Ç–æ-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
üé≠ –ü–µ—Ä–µ—Ö–æ–¥—ã: –ü–ª–∞–≤–Ω—ã–µ
üìê –û–±—Ä–µ–∑–∫–∞: –£–º–Ω–∞—è (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)
üåà –§–∏–ª—å—Ç—Ä—ã: –ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–µ

<i>–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –≤–∏–¥–µ–æ</i>
        """
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("settings_menu"),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in show_settings_menu: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(SettingsAction.filter(F.action == "title_settings"), SettingsStates.main)
async def show_title_settings(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext) -> None:
    """Show title settings menu."""
    await state.set_state(SettingsStates.title_settings)
    text = f"""
üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞</b>

üìã <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</b>
‚Ä¢ –¶–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —à—Ä–∏—Ñ—Ç
‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
‚Ä¢ –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è

üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

<i>–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_style_settings_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(SettingsAction.filter(F.action == "subtitle_settings"), SettingsStates.main)
async def show_subtitle_settings(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext) -> None:
    """Show subtitle settings menu."""
    await state.set_state(SettingsStates.subtitle_settings)
    text = f"""
üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞</b>

üìù <b>–°—É–±—Ç–∏—Ç—Ä—ã:</b>
‚Ä¢ –¶–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —à—Ä–∏—Ñ—Ç  
‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ–±–≤–æ–¥–∫–∞

üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

<i>–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_style_settings_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(SettingsAction.filter(F.action == "preview_style"), SettingsStates.main)
async def preview_style(callback: CallbackQuery, state: FSMContext) -> None:
    """Generate and send a preview of the current style settings."""
    await callback.answer("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...", show_alert=False)
    user_id = callback.from_user.id
    
    # Get current user settings
    title_color = await UserSettingsService.get_style_setting(user_id, 'title_style', 'color')
    title_size = await UserSettingsService.get_style_setting(user_id, 'title_style', 'size')
    title_font = await UserSettingsService.get_style_setting(user_id, 'title_style', 'font')
    
    subtitle_color = await UserSettingsService.get_style_setting(user_id, 'subtitle_style', 'color')
    subtitle_size = await UserSettingsService.get_style_setting(user_id, 'subtitle_style', 'size')
    subtitle_font = await UserSettingsService.get_style_setting(user_id, 'subtitle_style', 'font')
    
    # Get human-readable names
    title_color_name = UserSettingsService.get_color_name(title_color)
    title_size_name = UserSettingsService.get_size_name(title_size)
    subtitle_color_name = UserSettingsService.get_color_name(subtitle_color)
    subtitle_size_name = UserSettingsService.get_size_name(subtitle_size)
    
    text = f"""
üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–ª–µ–π</b>

<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>

üìã <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>
‚Ä¢ –¶–≤–µ—Ç: {title_color_name}
‚Ä¢ –†–∞–∑–º–µ—Ä: {title_size_name}
‚Ä¢ –®—Ä–∏—Ñ—Ç: {title_font}

üìù <b>–°—É–±—Ç–∏—Ç—Ä—ã:</b>
‚Ä¢ –¶–≤–µ—Ç: {subtitle_color_name}
‚Ä¢ –†–∞–∑–º–µ—Ä: {subtitle_size_name}
‚Ä¢ –®—Ä–∏—Ñ—Ç: {subtitle_font}

<i>üí° –°–æ–≤–µ—Ç: –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–∏–¥–µ–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_style_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    if not preview_style:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", show_alert=True)


@router.callback_query(SettingsAction.filter(F.action == "reset_to_defaults"), SettingsStates.main)
async def reset_settings_to_defaults(callback: CallbackQuery, state: FSMContext) -> None:
    """Reset user settings to default values."""
    user_id = callback.from_user.id
    
    # Reset user settings to default
    success = await UserSettingsService.reset_user_settings(user_id)
    
    if success:
        await callback.answer("‚úÖ –°—Ç–∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.", show_alert=True)
    
    # Return to style menu
    await show_style_settings(callback)


@router.callback_query(SettingsAction.filter(F.action == "back_to_settings"), SettingsStates)
async def back_to_settings_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """Go back to the main settings menu."""
    await show_settings_menu(callback, SettingsAction(action="open_settings_menu"), state)


# --- Title Settings Handlers ---

@router.callback_query(SettingsValueAction.filter(F.entity == "title" and F.param == "color"), SettingsStates.title_settings)
async def set_title_color(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """Set the color for the title."""
    user_id = callback.from_user.id
    color = callback_data.value
    
    # Save color to user settings
    settings_key = "title_style"
    success = await UserSettingsService.set_style_setting(user_id, settings_key, 'color', color)
    
    if success:
        color_name = UserSettingsService.get_color_name(color)
        await callback.answer(f"‚úÖ –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {color_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    # Return to title settings
    await show_title_settings(callback, SettingsAction(action="title_settings"), state)


@router.callback_query(SettingsValueAction.filter(F.entity == "title" and F.param == "size"), SettingsStates.title_settings)
async def set_title_size(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """Set the size for the title."""
    user_id = callback.from_user.id
    size = callback_data.value
    
    # Save size to user settings
    settings_key = "title_style"
    success = await UserSettingsService.set_style_setting(user_id, settings_key, 'size', size)
    
    if success:
        size_name = UserSettingsService.get_size_name(size)
        await callback.answer(f"‚úÖ –†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {size_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    # Return to title settings
    await show_title_settings(callback, SettingsAction(action="title_settings"), state)


@router.callback_query(SettingsAction.filter(F.action == "font_settings"), SettingsStates.title_settings)
async def open_font_settings(callback: CallbackQuery, state: FSMContext) -> None:
    """Redirect to the font selection menu."""
    # We need to call the handler from font_handlers.py
    # To do this cleanly, we can use a dispatcher instance if available
    # or just inform the user. For now, let's just send a message.
    # A better way would be to refactor this to use a shared service or router.
    from app.bot.handlers.font_handlers import show_font_selection
    await callback.message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–æ–≤...")
    # This simulates a user command to open the font menu
    # Note: This is a simplified approach.
    # A full solution might involve deeper integration between handlers.
    await show_font_selection(callback, FontAction(action="select_font"), state)


# --- Subtitle Settings Handlers ---

@router.callback_query(SettingsValueAction.filter(F.entity == "subtitle" and F.param == "color"), SettingsStates.subtitle_settings)
async def set_subtitle_color(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """Set the color for the subtitle."""
    user_id = callback.from_user.id
    color = callback_data.value
    
    # Save color to user settings
    settings_key = "subtitle_style"
    success = await UserSettingsService.set_style_setting(user_id, settings_key, 'color', color)
    
    if success:
        color_name = UserSettingsService.get_color_name(color)
        await callback.answer(f"‚úÖ –¶–≤–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {color_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    # Return to subtitle settings
    await show_subtitle_settings(callback, SettingsAction(action="subtitle_settings"), state)


@router.callback_query(SettingsValueAction.filter(F.entity == "subtitle" and F.param == "size"), SettingsStates.subtitle_settings)
async def set_subtitle_size(callback: CallbackQuery, callback_data: SettingsValueAction, state: FSMContext) -> None:
    """Set the size for the subtitle."""
    user_id = callback.from_user.id
    size = callback_data.value
    
    # Save size to user settings
    settings_key = "subtitle_style"
    success = await UserSettingsService.set_style_setting(user_id, settings_key, 'size', size)
    
    if success:
        size_name = UserSettingsService.get_size_name(size)
        await callback.answer(f"‚úÖ –†–∞–∑–º–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {size_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    # Return to subtitle settings
    await show_subtitle_settings(callback, SettingsAction(action="subtitle_settings"), state)


@router.callback_query(SettingsAction.filter(F.action == "video_settings"))
async def show_video_settings(callback: CallbackQuery) -> None:
    """
    Show video processing settings.
    
    Args:
        callback: Callback query
    """
    text = f"""
üé¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ</b>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: 30 —Å–µ–∫
üìä –ö–∞—á–µ—Å—Ç–≤–æ: 1080p
üìù –°—É–±—Ç–∏—Ç—Ä—ã: –í–∫–ª—é—á–µ–Ω—ã
üé® –§–æ—Ä–º–∞—Ç: 9:16 (Shorts)

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å: –ê–≤—Ç–æ-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
üé≠ –ü–µ—Ä–µ—Ö–æ–¥—ã: –ü–ª–∞–≤–Ω—ã–µ
üìê –û–±—Ä–µ–∑–∫–∞: –£–º–Ω–∞—è (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)
üåà –§–∏–ª—å—Ç—Ä—ã: –ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–µ

<i>–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –≤–∏–¥–µ–æ</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("settings_menu"),
        parse_mode="HTML"
    )


@router.callback_query(SettingsAction.filter(F.action == "storage_settings"))
async def show_storage_settings(callback: CallbackQuery) -> None:
    """
    Show storage settings.
    
    Args:
        callback: Callback query
    """
    text = f"""
üíæ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>

<b>Google Drive:</b>
üìÅ –ü–∞–ø–∫–∞: /VideoBot/Processed
üîó –°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
üìã –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω: video_YYYYMMDD_HHMMSS

<b>–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</b>
üíø –°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–æ
üìÅ –ü—É—Ç—å: -

<b>–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞:</b>
üóëÔ∏è –£–¥–∞–ª—è—Ç—å —á–µ—Ä–µ–∑: 30 –¥–Ω–µ–π
üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –î–∞

<i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("settings_menu"),
        parse_mode="HTML"
    )


@router.callback_query(SettingsAction.filter(F.action == "notifications"))
async def show_notification_settings(callback: CallbackQuery) -> None:
    """
    Show notification settings.
    
    Args:
        callback: Callback query
    """
    text = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:</b>
‚úÖ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –í–∫–ª—é—á–µ–Ω–æ
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ
‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å (–∫–∞–∂–¥—ã–µ 25%): –û—Ç–∫–ª—é—á–µ–Ω–æ
‚úÖ –û—à–∏–±–∫–∏: –í–∫–ª—é—á–µ–Ω–æ

<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:</b>
‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è: –û—Ç–∫–ª—é—á–µ–Ω–æ
‚ùå –í—Ä–µ–º—è: 20:00

<b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: –í–∫–ª—é—á–µ–Ω–æ
‚ùå –†–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –û—Ç–∫–ª—é—á–µ–Ω–æ

<i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("settings_menu"),
        parse_mode="HTML"
    )


@router.callback_query(SettingsAction.filter(F.action == "profile"))
async def show_profile_settings(callback: CallbackQuery) -> None:
    """
    Show profile settings.
    
    Args:
        callback: Callback query
    """
    user_id = callback.from_user.id
    
    async with get_db_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"""
üë§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üÜî ID: <code>{user.id}</code>
üë§ –ò–º—è: {user.display_name}
üìù Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üî∞ –†–æ–ª—å: {user.role.value.title()}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: 0
‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: 0 –º–∏–Ω
üíæ –î–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 –ú–ë

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:</b>
üîí –ü—Ä–æ—Ñ–∏–ª—å: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–∫—Ä—ã—Ç–∞
        """
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("settings_menu"),
            parse_mode="HTML"
        )


@router.callback_query(SettingsAction.filter(F.action == "style_settings"))
async def show_style_settings(callback: CallbackQuery) -> None:
    """
    Show style settings menu.
    
    Args:
        callback: Callback query
    """
    text = f"""
üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:

üìã <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</b>
‚Ä¢ –¶–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —à—Ä–∏—Ñ—Ç
‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
‚Ä¢ –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è

üìù <b>–°—É–±—Ç–∏—Ç—Ä—ã:</b>
‚Ä¢ –¶–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —à—Ä–∏—Ñ—Ç  
‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ–±–≤–æ–¥–∫–∞

üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

<i>–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_style_settings_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(StyleAction.filter(F.action == "text_settings"), SettingsStates.main)
async def show_text_settings(callback: CallbackQuery, callback_data: StyleAction) -> None:
    """
    Show text settings for title or subtitle.
    
    Args:
        callback: Callback query
        callback_data: Style action data
    """
    user_id = callback.from_user.id
    text_type = callback_data.text_type
    text_label = "–∑–∞–≥–æ–ª–æ–≤–∫–∞" if text_type == "title" else "—Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    text_emoji = "üìã" if text_type == "title" else "üìù"
    
    # Get current user settings
    settings_key = f"{text_type}_style"
    current_color = await UserSettingsService.get_style_setting(user_id, settings_key, 'color')
    current_size = await UserSettingsService.get_style_setting(user_id, settings_key, 'size')
    current_font = await UserSettingsService.get_style_setting(user_id, settings_key, 'font')
    
    # Get human-readable names
    color_name = UserSettingsService.get_color_name(current_color)
    size_name = UserSettingsService.get_size_name(current_size)
    
    text = f"""
{text_emoji} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {text_label}</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üé® –¶–≤–µ—Ç: {color_name}
üìè –†–∞–∑–º–µ—Ä: {size_name}
üî§ –®—Ä–∏—Ñ—Ç: {current_font}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
‚Ä¢ –ü–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç

<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_text_settings_keyboard(text_type),
        parse_mode="HTML"
    )


@router.callback_query(StyleAction.filter(F.action == "color_settings"))
async def show_color_settings(callback: CallbackQuery, callback_data: StyleAction) -> None:
    """
    Show color settings.
    
    Args:
        callback: Callback query
        callback_data: Style action data
    """
    text_type = callback_data.text_type
    text_label = "–∑–∞–≥–æ–ª–æ–≤–∫–∞" if text_type == "title" else "—Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    
    text = f"""
üé® <b>–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ {text_label}</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã:

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞:</b>
‚Ä¢ ‚ö™ –ë–µ–ª—ã–π - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π, —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ—Ç—Å—è
‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–π - —è—Ä–∫–∏–π, –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ  
‚Ä¢ üîµ –°–∏–Ω–∏–π - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π
‚Ä¢ üü° –ñ–µ–ª—Ç—ã–π - —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –∑–∞–º–µ—Ç–Ω—ã–π

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞:</b>
‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–π - –ø—Ä–∏—Ä–æ–¥–Ω—ã–π, —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π
‚Ä¢ üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Ç–µ–ø–ª—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
‚Ä¢ üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π, –Ω–µ–æ–±—ã—á–Ω—ã–π
‚Ä¢ üå∏ –†–æ–∑–æ–≤—ã–π - –Ω–µ–∂–Ω—ã–π, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π

<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_color_settings_keyboard(text_type),
        parse_mode="HTML"
    )


@router.callback_query(StyleAction.filter(F.action == "size_settings"))
async def show_size_settings(callback: CallbackQuery, callback_data: StyleAction) -> None:
    """
    Show size settings.
    
    Args:
        callback: Callback query
        callback_data: Style action data
    """
    text_type = callback_data.text_type
    text_label = "–∑–∞–≥–æ–ª–æ–≤–∫–∞" if text_type == "title" else "—Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    
    text = f"""
üìè <b>–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ {text_label}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:

üìè <b>–ú–∞–ª–µ–Ω—å–∫–∏–π</b> - –¥–ª—è –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
üìê <b>–°—Ä–µ–¥–Ω–∏–π</b> - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
üìä <b>–ë–æ–ª—å—à–æ–π</b> - –¥–ª—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  
üìà <b>–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏: —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –±–æ–ª—å—à–æ–π
‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã: –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ —Å—Ä–µ–¥–Ω–∏–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∑—Ä–∏—Ç–µ–ª–µ–π

<i>–†–∞–∑–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_size_settings_keyboard(text_type),
        parse_mode="HTML"
    )


@router.callback_query(StyleAction.filter(F.action == "set_color"))
async def set_text_color(callback: CallbackQuery, callback_data: StyleAction) -> None:
    """
    Set text color.
    
    Args:
        callback: Callback query
        callback_data: Style action data
    """
    user_id = callback.from_user.id
    text_type = callback_data.text_type
    color = callback_data.value
    text_label = "–∑–∞–≥–æ–ª–æ–≤–∫–∞" if text_type == "title" else "—Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    
    # Save color to user settings
    settings_key = f"{text_type}_style"
    success = await UserSettingsService.set_style_setting(user_id, settings_key, 'color', color)

    if success:
        color_name = UserSettingsService.get_color_name(color)
        await callback.answer(f"‚úÖ –¶–≤–µ—Ç {text_label} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {color_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        
    # Return to color settings
    await show_color_settings(callback, callback_data)


@router.callback_query(StyleAction.filter(F.action == "set_size"))
async def set_text_size(callback: CallbackQuery, callback_data: StyleAction) -> None:
    """
    Set text size.
    
    Args:
        callback: Callback query
        callback_data: Style action data
    """
    user_id = callback.from_user.id
    text_type = callback_data.text_type
    size = callback_data.value
    text_label = "–∑–∞–≥–æ–ª–æ–≤–∫–∞" if text_type == "title" else "—Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    
    # Save size to user settings
    settings_key = f"{text_type}_style"
    success = await UserSettingsService.set_style_setting(user_id, settings_key, 'size', size)

    if success:
        size_name = UserSettingsService.get_size_name(size)
        await callback.answer(f"‚úÖ –†–∞–∑–º–µ—Ä {text_label} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {size_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

    # Return to size settings
    await show_size_settings(callback, callback_data)


@router.callback_query(StyleAction.filter(F.action == "reset_styles"))
async def reset_styles(callback: CallbackQuery) -> None:
    """
    Reset styles to default.
    
    Args:
        callback: Callback query
    """
    user_id = callback.from_user.id
    
    # Reset user settings to default
    success = await UserSettingsService.reset_user_settings(user_id)
    
    if success:
        await callback.answer("‚úÖ –°—Ç–∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    # Return to style menu
    await show_style_settings(callback)


@router.callback_query(StyleAction.filter(F.action == "style_menu"))
async def return_to_style_menu(callback: CallbackQuery) -> None:
    """
    Return to style settings menu.
    
    Args:
        callback: Callback query
    """
    await show_style_settings(callback) 


@router.callback_query(SettingsAction.filter(F.action == "proxy_settings"))
async def show_proxy_settings(callback: CallbackQuery, state: FSMContext) -> None:
    logger.info(f"[DEBUG] –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await state.set_state(ProxyStates.input)
    text = (
        "üåê <b>–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
        "–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø–∏—Å—å–º–∞/–∫–∞–±–∏–Ω–µ—Ç–∞):\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i>\nPv4 Shared\n–†–æ—Å—Å–∏—è\nlZOy6obFDx\nGkiORLG8mS\n109.120.147.249\n55799\n24933\n20 Mbps\n11.07.2025, 9:53\n–ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
        "<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫!"
    )
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer() 


@router.callback_query(SettingsAction.filter(F.action == "proxy_settings"), VideoProcessingStates.configuring_settings)
async def show_proxy_settings_from_video(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
    await state.set_state(ProxyStates.input)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤–∏–¥–µ–æ
    await state.update_data(_return_to_video_settings=True)
    text = (
        "üåê <b>–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
        "–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø–∏—Å—å–º–∞/–∫–∞–±–∏–Ω–µ—Ç–∞):\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i>\nPv4 Shared\n–†–æ—Å—Å–∏—è\nlZOy6obFDx\nGkiORLG8mS\n109.120.147.249\n55799\n24933\n20 Mbps\n11.07.2025, 9:53\n–ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
        "<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫!"
    )
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


@router.message(ProxyStates.input)
async def handle_proxy_input(message: Message, state: FSMContext) -> None:
    logger.info(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏: {message.text}")
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏, –ø–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    user_id = message.from_user.id
    proxy_str = parse_proxy_text(message.text)
    data = await state.get_data()
    if proxy_str:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        await UserSettingsService.set_user_setting(user_id, 'download_proxy', proxy_str)
        await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫!\n\n<code>{proxy_str}</code>", parse_mode="HTML")
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤–∏–¥–µ–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if data.get('_return_to_video_settings'):
            await state.set_state(VideoProcessingStates.configuring_settings)
            source = data.get('source_url', data.get('file_name', ''))
            from app.bot.handlers.video_handlers import show_video_settings
            await show_video_settings(message, state, source)
        else:
            await state.clear()
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.") 
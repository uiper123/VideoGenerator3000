"""
User handlers for basic bot commands and navigation.
"""
import logging
from typing import Any

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from app.bot.keyboards.main_menu import (
    MenuAction, 
    SettingsAction,
    get_main_menu_keyboard,
    get_video_menu_keyboard,
    get_settings_menu_keyboard,
    get_main_reply_keyboard
)
from app.bot.keyboards.font_keyboards import FontAction
from app.config.constants import UserRole, MENU_EMOJIS
from app.database.connection import get_db_session
from app.database.models import User


logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot) -> None:
    """
    Handle /start command.
    
    Args:
        message: Telegram message
        bot: Bot instance
    """
    user_id = message.from_user.id
    
    # Create or update user in database
    async with get_db_session() as session:
        user = await session.get(User, user_id)
        if not user:
            user = User(
                id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                is_active=True
            )
            session.add(user)
            await session.commit()
            logger.info(f"New user registered: {user_id}")
        else:
            # Update user info if changed
            user.username = message.from_user.username
            user.first_name = message.from_user.first_name
            user.last_name = message.from_user.last_name
            user.is_active = True
            await session.commit()
    
    welcome_text = f"""
üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Video Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YouTube Shorts/TikTok.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üì• –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–∞–º
‚Ä¢ ‚úÇÔ∏è –ù–∞—Ä–µ–∑–∞—Ç—å –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
‚Ä¢ üé® –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç 9:16
‚Ä¢ üìù –î–æ–±–∞–≤–ª—è—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google Drive
‚Ä¢ üìä –í–µ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
YouTube, TikTok, Instagram, Vimeo –∏ –¥—Ä—É–≥–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(user.role),
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """
    Handle /help command.
    
    Args:
        message: Telegram message
    """
    help_text = f"""
{MENU_EMOJIS['help']} <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üé¨ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ñ–∞–π–ª)
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ MP4, AVI, MKV, MOV, WMV, FLV, WebM

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 —á–∞—Å–∞
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2GB
‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: 5 –≤–∏–¥–µ–æ

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin
    """
    
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """
    Handle /stats command.
    
    Args:
        message: Telegram message
    """
    user_id = message.from_user.id
    
    async with get_db_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # TODO: Implement actual statistics calculation
        stats_text = f"""
{MENU_EMOJIS['stats']} <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.display_name}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y')}

üìπ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ:</b> 0
‚è±Ô∏è <b>–û–±—â–µ–µ –≤—Ä–µ–º—è:</b> 0 –º–∏–Ω
üíæ <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> 0 –ú–ë
üìä <b>–°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:</b> 0

<i>–ù–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!</i>
        """
        
        await message.answer(stats_text, parse_mode="HTML")


# Menu navigation handlers
@router.callback_query(MenuAction.filter(F.action == "main_menu"))
async def show_main_menu(callback: CallbackQuery, callback_data: MenuAction, bot: Bot) -> None:
    """
    Show main menu.
    
    Args:
        callback: Callback query
        callback_data: Menu action data
        bot: Bot instance
    """
    user_id = callback.from_user.id
    
    async with get_db_session() as session:
        user = await session.get(User, user_id)
        user_role = user.role if user else UserRole.USER
    
    text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Video Bot!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    # Use .edit_text if it's a callback, otherwise .answer for a new message
    if callback.message:
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu_keyboard(user_role),
            parse_mode="HTML"
        )
    else:
        await callback.answer()


@router.callback_query(MenuAction.filter(F.action == "video_menu"))
async def show_video_menu(callback: CallbackQuery, callback_data: MenuAction) -> None:
    """
    Show video processing menu.
    
    Args:
        callback: Callback query
        callback_data: Menu action data
    """
    text = f"""
{MENU_EMOJIS['video']} <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:

üìé <b>–°—Å—ã–ª–∫–∞</b> - –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
üìÅ <b>–§–∞–π–ª</b> - –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª
üìã <b>–ü–∞–∫–µ—Ç</b> - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
üîÑ <b>–ó–∞–¥–∞—á–∏</b> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_video_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(MenuAction.filter(F.action == "settings_menu"))
async def show_settings_menu(callback: CallbackQuery, callback_data: MenuAction) -> None:
    """
    Show settings menu.
    
    Args:
        callback: Callback query
        callback_data: Menu action data
    """
    text = f"""
{MENU_EMOJIS['settings']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:

üî§ <b>–®—Ä–∏—Ñ—Ç—ã</b> - –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
üé¨ <b>–í–∏–¥–µ–æ</b> - –ö–∞—á–µ—Å—Ç–≤–æ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</b> - Google Drive, –ø–∞–ø–∫–∏
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(MenuAction.filter(F.action == "stats_menu"))
async def show_stats_menu(callback: CallbackQuery, callback_data: MenuAction) -> None:
    """
    Show statistics menu.
    
    Args:
        callback: Callback query
        callback_data: Menu action data
    """
    user_id = callback.from_user.id
    
    async with get_db_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # TODO: Calculate real statistics
        stats_text = f"""
{MENU_EMOJIS['stats']} <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –ò–º—è: {user.display_name}
‚Ä¢ –†–æ–ª—å: {user.role.value.title()}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}

üìä <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0
‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: 0
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: 0
‚Ä¢ –û—à–∏–±–æ–∫: 0

‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: 0 –º–∏–Ω
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: 0 –º–∏–Ω
‚Ä¢ –°–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ: -
‚Ä¢ –°–∞–º–æ–µ –¥–æ–ª–≥–æ–µ: -

üíæ <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: 0 –ú–ë
‚Ä¢ –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: 0
‚Ä¢ –í Google Drive: 0

üìà <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –í–∏–¥–µ–æ: 0
‚Ä¢ –§—Ä–∞–≥–º–µ–Ω—Ç—ã: 0
‚Ä¢ –í—Ä–µ–º—è: 0 –º–∏–Ω
        """
        
        from app.bot.keyboards.main_menu import get_back_keyboard
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard("main_menu"),
            parse_mode="HTML"
        )
    

@router.callback_query(MenuAction.filter(F.action == "help"))
async def show_help(callback: CallbackQuery, callback_data: MenuAction) -> None:
    """
    Show help information.
    
    Args:
        callback: Callback query
        callback_data: Menu action data
    """
    help_text = f"""
{MENU_EMOJIS['help']} <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞</b>

<b>üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ"
2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (15-60 —Å–µ–∫)
   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ (720p, 1080p, 4K)
   ‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã (–≤–∫–ª/–≤—ã–∫–ª)
4. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"

<b>üìé –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ YouTube (youtube.com, youtu.be)
‚Ä¢ TikTok (tiktok.com)
‚Ä¢ Instagram (instagram.com)
‚Ä¢ Vimeo (vimeo.com)
‚Ä¢ Twitter/X (twitter.com, x.com)

<b>üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
MP4, AVI, MKV, MOV, WMV, FLV, WebM, M4V

<b>‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: –¥–æ 3 —á–∞—Å–æ–≤
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 2GB
‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: –¥–æ 5 –∑–∞–¥–∞—á

<b>üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –§–æ—Ä–º–∞—Ç: 1080x1920 (9:16)
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –¥–æ 4K
‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: Google Drive

<b>‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin
    """
    
    from app.bot.keyboards.main_menu import get_back_keyboard
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_back_keyboard("main_menu"),
        parse_mode="HTML"
    )


# Handle reply keyboard buttons
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu_button(message: Message, bot: Bot) -> None:
    """Handle main menu button from reply keyboard."""
    user_id = message.from_user.id
    
    async with get_db_session() as session:
        user = await session.get(User, user_id)
        user_role = user.role if user else UserRole.USER
    
    text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(
        text,
        reply_markup=get_main_menu_keyboard(user_role),
        parse_mode="HTML"
    )


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message) -> None:
    """Handle help button from reply keyboard."""
    await cmd_help(message)


@router.message(F.text == "üé¨ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
async def handle_quick_processing_button(message: Message) -> None:
    """Handle quick processing button from reply keyboard."""
    text = f"""
üé¨ <b>–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:

‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: 30 —Å–µ–∫
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 1080p
‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã: –≤–∫–ª—é—á–µ–Ω—ã

<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>
    """
    
    from app.bot.keyboards.main_menu import get_back_keyboard
    
    await message.answer(
        text,
        reply_markup=get_back_keyboard("main_menu"),
        parse_mode="HTML"
    )


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def handle_my_tasks_button(message: Message) -> None:
    """Handle my tasks button from reply keyboard."""
    # TODO: Implement tasks list
    text = """
üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.

–ù–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏ –∑–¥–µ—Å—å.
    """
    
    from app.bot.keyboards.main_menu import get_back_keyboard
    
    await message.answer(
        text,
        reply_markup=get_back_keyboard("main_menu"),
        parse_mode="HTML"
    )


@router.callback_query(SettingsAction.filter(F.action == "font_settings"))
async def handle_font_settings(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext) -> None:
    """
    Handle font settings button.
    
    Args:
        callback: Callback query
        callback_data: Settings action data
        state: FSM context
    """
    # Redirect to font selection
    from app.bot.keyboards.font_keyboards import FontAction
    font_action = FontAction(action="select_font")
    
    # Import and call font handler
    from app.bot.handlers.font_handlers import show_font_selection
    await show_font_selection(callback, font_action, state)


@router.callback_query(MenuAction.filter(F.action == "cancel"))
async def handle_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Handle cancel action.
    
    Args:
        callback: Callback query
        state: FSM context
    """
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer()
        return

    logger.info(f"Cancelling state {current_state} for user {callback.from_user.id}")
    await state.clear()

    await callback.message.edit_text(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML"
    )
    # Go back to the main menu after cancellation
    await show_main_menu(callback, MenuAction(action="main_menu"), callback.bot)



#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Colab –¥–ª—è VideoGenerator3000
"""
import os
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/content/videobot/logs/colab.log')
    ]
)
logger = logging.getLogger(__name__)

def setup_enhanced_logging():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Google Colab
    
    1. –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    3. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥ Celery –≤ —Ñ–∞–π–ª
    """
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Google Colab")
    
    # 1. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path("/content/videobot/logs")
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    logging.getLogger("app").setLevel(logging.DEBUG)
    logging.getLogger("app.video_processing").setLevel(logging.DEBUG)
    logging.getLogger("app.workers").setLevel(logging.DEBUG)
    logging.getLogger("app.services").setLevel(logging.DEBUG)
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –õ–æ–≥–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
    download_handler = logging.FileHandler('/content/videobot/logs/download.log')
    download_handler.setFormatter(formatter)
    download_handler.setLevel(logging.DEBUG)
    logging.getLogger("app.video_processing.downloader").addHandler(download_handler)
    
    # –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
    processing_handler = logging.FileHandler('/content/videobot/logs/processing.log')
    processing_handler.setFormatter(formatter)
    processing_handler.setLevel(logging.DEBUG)
    logging.getLogger("app.video_processing.processor").addHandler(processing_handler)
    
    # –õ–æ–≥–∏ Google Drive
    drive_handler = logging.FileHandler('/content/videobot/logs/drive.log')
    drive_handler.setFormatter(formatter)
    drive_handler.setLevel(logging.DEBUG)
    logging.getLogger("app.services.google_drive").addHandler(drive_handler)
    
    logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return True

def patch_celery_logging():
    """
    –ü–∞—Ç—á–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Colab
    """
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Celery")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Celery
    celery_logging_config = """
from celery.signals import setup_logging

@setup_logging.connect
def configure_logging(*args, **kwargs):
    import logging
    from logging.config import dictConfig
    
    dictConfig({
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(asctime)s - %(name)s - %(levelname)s - [%(process)d] - %(message)s'
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': '/content/videobot/logs/celery.log',
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'celery': {
                'handlers': ['console', 'file'],
                'level': 'INFO',
                'propagate': False,
            },
            'app': {
                'handlers': ['console', 'file'],
                'level': 'DEBUG',
                'propagate': False,
            },
        }
    })
    """
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
    celery_logging_path = Path("/content/videobot/app/workers/celery_logging.py")
    celery_logging_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(celery_logging_path, 'w') as f:
        f.write(celery_logging_config)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ celery_app.py
    celery_app_path = Path("/content/videobot/app/workers/celery_app.py")
    
    if celery_app_path.exists():
        with open(celery_app_path, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç
        if "import celery_logging" not in content:
            # –ù–∞—Ö–æ–¥–∏–º –∏–º–ø–æ—Ä—Ç—ã
            import_section_end = content.find("\n\n", content.find("import"))
            if import_section_end != -1:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
                content = content[:import_section_end] + "\n# Import enhanced logging\nimport app.workers.celery_logging" + content[import_section_end:]
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                with open(celery_app_path, 'w') as f:
                    f.write(content)
                
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ celery_app.py")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ celery_app.py")
        else:
            logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ celery_app.py")
    else:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {celery_app_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return True

def add_progress_logging():
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    logger.info("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_code = """
import sys
import time
from datetime import datetime

class ProgressLogger:
    def __init__(self, total, description="Progress", update_interval=1.0):
        self.total = total
        self.description = description
        self.start_time = datetime.now()
        self.last_update = time.time()
        self.update_interval = update_interval
        self.current = 0
        self.last_percent = 0
        
    def update(self, current):
        self.current = current
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if current_time - self.last_update >= self.update_interval or current >= self.total:
            percent = min(100, int(current * 100 / self.total))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if percent != self.last_percent or current >= self.total:
                elapsed = (datetime.now() - self.start_time).total_seconds()
                
                # –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                if current > 0:
                    eta = elapsed * (self.total - current) / current
                    eta_str = f"{int(eta / 60)}:{int(eta % 60):02d}"
                else:
                    eta_str = "N/A"
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                bar_length = 30
                filled_length = int(bar_length * current / self.total)
                bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                print(f"\\r{self.description}: |{bar}| {percent}% ({current}/{self.total}) ETA: {eta_str}", end='')
                sys.stdout.flush()
                
                if current >= self.total:
                    print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                
                self.last_update = current_time
                self.last_percent = percent
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª
    progress_path = Path("/content/videobot/app/utils/progress.py")
    progress_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(progress_path, 'w') as f:
        f.write(progress_code)
    
    logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    return True

def create_log_viewer():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤")
    
    script_content = """#!/bin/bash
# Log Viewer Script

echo "üìã VideoGenerator3000 - Log Viewer"
echo "=================================="

case "$1" in
    "download")
        echo "üîΩ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è..."
        tail -f /content/videobot/logs/download.log
        ;;
    "processing")
        echo "‚öôÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ..."
        tail -f /content/videobot/logs/processing.log
        ;;
    "drive")
        echo "‚òÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Google Drive..."
        tail -f /content/videobot/logs/drive.log
        ;;
    "celery")
        echo "üîÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Celery..."
        tail -f /content/videobot/logs/celery.log
        ;;
    "all")
        echo "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ª–æ–≥–æ–≤..."
        tail -f /content/videobot/logs/*.log
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {download|processing|drive|celery|all}"
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:"
        ls -la /content/videobot/logs/
        ;;
esac
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª
    script_path = Path("/content/videobot/view_logs.sh")
    
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_path, 0o755)
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: {script_path}")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîß VideoGenerator3000 - –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Colab")
    logger.info("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_enhanced_logging()
    
    # –ü–∞—Ç—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Celery
    patch_celery_logging()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    add_progress_logging()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    create_log_viewer()
    
    logger.info("=" * 50)
    logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("")
    logger.info("üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    logger.info("  - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: !bash /content/videobot/view_logs.sh download")
    logger.info("  - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: !bash /content/videobot/view_logs.sh processing")
    logger.info("  - Google Drive: !bash /content/videobot/view_logs.sh drive")
    logger.info("  - Celery: !bash /content/videobot/view_logs.sh celery")
    logger.info("  - –í—Å–µ –ª–æ–≥–∏: !bash /content/videobot/view_logs.sh all")

if __name__ == "__main__":
    main() 